/// Insertion Sort (Сортировка вставками)

// Как работает алгоритм
// 1.	Считаем первый элемент массива отсортированным.
// 2.	Переходим ко второму элементу и сравниваем его с элементами отсортированной части.
// o	Если он меньше, перемещаем его в нужное место.
// 3.	Повторяем шаги для каждого следующего элемента, расширяя отсортированную часть массива.
// 4.	В результате весь массив становится отсортированным.

const insertionSort = (arr) => {
    //let a = [5, 3, 8, 4, 2]; //                                                                         3я ит// [3, 5, 8, 4, 2];
    for (let i = 1; i < arr.length; i++) {
      //                                                                                           ||| нач с 8, тк і = 3
      let current = arr[i]; //                  // Текущий элемент, типа отсортированный на 1й ит это 3, тк i начиналось с 1го в цикле  ||| каррент = 4
      let j = i - 1; //                         // индекс предыдущего элемента, на 1й итерации равен 0, сам эл-т на 1й итерации = 5     ||| j = 2
      debugger; //                                                                                                                            ||| while (2 >= 0 && 8 > 4) попадаем в цикл   ///(на 2й ит было while (1 >= 0 && 5 > 8)) и не попали
      // Сдвигаем элементы вправо, чтобы найти место для текущего элемента                                                              ||| arr[j + 1] = arr[j] => [3, 5, 8, 8, 2]
      while (j >= 0 && arr[j] > current) {
        // тут сравниваем на 1й ит 5 и 3, => ( 0 >= 0 && 5  > 3 ), попадаем в цикл                  |||   j--; => j=1 => (1 >= 0 && 5 > 4) => [3, 5, 5, 8, 2]
        arr[j + 1] = arr[j]; //следующий заменяем предыдущим  (на 1й ит получается  [5, 5, 8, 4, 2])                                    ||| j--; => j=0 => (0 >= 0 && 3 > 5) - 2е усл не вып, т.е в цикл не идем
        j--; // а тут мы ползем сравнивать влево, чтобы не оставить после того, как поменяли, а, если надо, поменять левее              |||
        debugger; // но, тк на 1й ит  j--; получается -1, то во 2й раз в цикл мы не заходим, тк  while (j >= 0 && arr[j] > current)      |||  arr[j + 1] = current; => arr[0 + 1] = 4; => [3, 4, 5, 8, 2]
      } // что логично, ибо двигать левее нулевого элемента не получится                                                       |||
      debugger; //                                                                                                                        |||
      // Вставляем текущий элемент в правильное место
      arr[j + 1] = current; // возвращаем тройку на место: arr[j + 1] = arr[0] = 3, см стр где объявлялся каррент
      debugger;
    }
    debugger;
    console.log(arr);
    return arr;
  };
  
  ///  insertionSort(a);